#+AUTHOR: Sylvain Ribstein
#+TITLE: GNU Emacs Configuration

* table of content                                                    :TOC@3:
- [[#emacs-initialization][Emacs Initialization]]
  - [[#packages-sources][Packages Sources]]
  - [[#use-package][use-package]]
  - [[#delight][delight]]
  - [[#authentification][Authentification]]
  - [[#defaults-values][defaults values]]
  - [[#customization][Customization]]
  - [[#turn-off-menu-toolbar-and-stuff][Turn off menu, toolbar and stuff]]
- [[#advanced-configuration][Advanced Configuration]]
  - [[#auto-completion-company][Auto-Completion =company=]]
  - [[#backups][Backups]]
  - [[#browser-firefox][Browser (Firefox)]]
    - [[#online-search-engine-mode][Online search =engine-mode=]]
  - [[#buffers-ace-window-ibuffer-toggle-window-split][Buffers ==ace-window== ==ibuffer== =toggle-window-split==]]
  - [[#reset-config-when-configorg-changes][reset config when config.org changes]]
  - [[#spelling][Spelling]]
    - [[#fly-spell][Fly Spell]]
  - [[#history][History]]
  - [[#improved-package-menu-paradox][improved package menu =paradox=]]
  - [[#general][General]]
    - [[#aggressive-indent][=aggressive-indent=]]
    - [[#move-text][=move-text=]]
    - [[#rainbow-mode][=rainbow-mode=]]
    -  [[#undo-tree][=undo-tree=]]
    - [[#wiki-summary][=wiki-summary=]]
  - [[#which-key][=which-key=]]
  - [[#ivy][Ivy]]
  - [[#navigation][Navigation]]
  - [[#parenthesis-rainbow-delimiters][Parenthesis =rainbow-delimiters=]]
  - [[#pdf][PDF]]
  - [[#point-and-region][Point and Region]]
  - [[#recent-files][Recent Files]]
  - [[#whitespaces][Whitespaces]]
    - [[#hungry-delete][=hungry-delete=]]
  - [[#windows][Windows]]
    - [[#windmove][=windmove=]]
    - [[#winner][=winner=]]
  - [[#word-wrap][Word Wrap]]
  - [[#custom-fonction][custom fonction]]
- [[#major-mode][Major mode]]
  - [[#languages][Languages]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#markdown][Markdown]]
    - [[#latex][LaTeX]]
    - [[#cobol][Cobol]]
    - [[#coq][COQ]]
    - [[#ocamla][OCamla]]
    - [[#java][Java]]
    - [[#typescript][Typescript]]
    - [[#yaml][Yaml]]
    - [[#config][config]]
  - [[#ledger][Ledger]]
    - [[#ynab][YNAB]]
    - [[#ledger-capture][ledger capture]]
  - [[#org][Org]]
    - [[#table-of-content][Table of Content]]
    - [[#cleaner-indentation][cleaner indentation]]
    - [[#agenda][Agenda]]
    - [[#bullets][Bullets]]
    - [[#capture][Capture]]
    - [[#clock][Clock]]
    - [[#contacts][Contacts]]
    - [[#custormization][Custormization]]
    - [[#journal][Journal]]
    - [[#languages-1][Languages]]
    - [[#other-improvment][Other improvment]]
  - [[#mail-gnus][Mail ==gnus==]]
  - [[#contact-bbdb][Contact ==bbdb==]]
  - [[#git-magit][Git ==magit==]]
  - [[#file-explorer-dired][File Explorer ==dired==]]
  - [[#password-store-pass][password-store ==pass==]]
  - [[#irc-erc][IRC ==erc==]]

* Emacs Initialization
** Packages Sources
   In order to install packages, it is useful to configure the package sources.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-archives '(
     ("melpa" . "http://melpa.org/packages/")
     ("gnu" . "http://elpa.gnu.org/packages/")
     ("org" . "http://orgmode.org/elpa/")
     ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC
** use-package
   To be able to manage its configuration with =use-package= it is necessary to
   first install it, if you don't already.
   *NOTE:* Need to understand if it use also the package manager of emacs
   Also ensure that the package is installed and if not tries to install it.

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (use-package use-package-ensure-system-package
   :ensure t
   :config
   (setq use-package-always-ensure t)); Avoid the :ensure keyword for each package

  (use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC
** delight
   delight is a way of showing wich major/minor is currently open
   It's show which mode on the main bar
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package delight)
#+END_SRC
** Authentification
   In which file the authentification is save
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq auth-sources '( "~/.authinfo.gpg" ))
#+END_SRC
** defaults values
For a better user experience of GNU Emacs, here are the default values I use.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emacs
   :delight
    (auto-fill-function " AF")
    (visual-line-mode)
   :config
    (setq-default
      ad-redefinition-action 'accept                   ; Silence warnings  redefinition
      cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
      display-time-default-load-average nil            ; Don't display load average
      fill-column 80                                   ; Set width for automatic line breaks
      help-window-select t                             ; Focus new help windows when opened
      inhibit-startup-screen t                         ; Disable start-up screen
      initial-scratch-message ""                       ; Empty the initial *scratch* buffer
      kill-ring-max 128                                ; Maximum length of kill ring
      load-prefer-newer t                              ; Prefers the newest version of a file
      mark-ring-max 128                                ; Maximum length of mark ring
      scroll-conservatively most-positive-fixnum       ; Always scroll by one line
      select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
      x-select-enable-clipboard t                      ; enable copy pas to classic clipboard
      tab-width 4                                      ; Set width for tabs
      user-full-name "Sylvain Ribstein"                ; Set the full name of the current user
      user-mail-address "sylvain.ribstein@gmail.com"   ; Set the email address of the current user
      vc-follow-symlinks t                             ; Always follow the symlinks
      view-read-only t                                 ; Always open read-only buffers in view-mode
      blink-cursor-mode nil                            ; the cursor wont blink
      indent-tabs-mode nil)                            ; use space instead of tab to indent
      (delete-selection-mode t)                        ; when writing into marked region delete it
      (transient-mark-mode t)                          ; same mark mouse or keyboard
      (cd "~/")                                        ; Move to the user directory
      (column-number-mode 1)                           ; Show the column number
      (display-time-mode 1)                            ; Enable time in the mode-line
      (fset 'yes-or-no-p 'y-or-n-p)                    ; Replace yes/no prompts with y/n
      (global-hl-line-mode)                            ; Hightlight current line
      (set-default-coding-systems 'utf-8)              ; Default to utf-8 encoding
      (show-paren-mode 1)                              ; Show the parenthesis
      (put 'upcase-region 'disabled nil)               ; Allow C-x C-u
      (put 'downcase-region 'disabled nil))             ; Allow C-x C-l
#+END_SRC

** Customization
   To avoid overloading the GNU Emacs custormization =init.el= file made by the
   user with the UI, I add the generated code in a separate file.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default custom-file (expand-file-name "~/.emacs.d/custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC

** Turn off menu, toolbar and stuff
   Since I never use the mouse with GNU Emacs, I prefer not to use certain
   graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip
   that I find invasive.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq menu-bar-mode nil)                              ; Disable the menu bar
  (setq scroll-bar-mode nil)                            ; Disable the scroll bar
  (setq tool-bar-mode nil)                              ; Disable the tool bar
  (setq tooltip-mode nil)                               ; Disable the tooltips
#+END_SRC

* Advanced Configuration
** Auto-Completion =company=

=company= provides auto-completion at point and to Displays a small pop-in
containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+END_SRC

# I use =company= with =company-box= that allows a company front-end with icons.

# #+BEGIN_SRC emacs-lisp :tangle yes
#    (use-package company-box
#      :after company
#      :delight
#      :hook (company-mode . company-box-mode))
# #+END_SRC

** Backups
   It is important to have a stable backup environment. Don't hesitate to save a
   lot.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package files
    :ensure nil
    :custom
    (backup-directory-alist `(("." . "~/.emacs.d/backup")))
    (delete-old-versions -1)
    (vc-make-backup-files t)
    (version-control t))
#+END_SRC

** Browser (Firefox)
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
*** Online search =engine-mode=
	With it I can start a search from within emacs,I use duckduckgo and bang.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package engine-mode
    :config
    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")
    :bind ("C-x /" . engine/search-duckduckgo))
#+END_SRC
** Buffers ==ace-window== ==ibuffer== =toggle-window-split==
  ace window allow to simply switch when only 2 buffer or to choose
  which buffer with key when multiple buff

  ibuffer is a better buffer mode

  toggle-window-split : switch layout when two buffers are open
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :bind
    (("C-x o" . ace-window)
     ("M-o" . ace-window))
    :init
      (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l))
      (setq aw-scope 'frame))

   (use-package ibuffer
      :bind ("C-x C-b" . ibuffer))

   (defun toggle-window-split ()
     (interactive)
     (if (= (count-windows) 2)
       (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
  (global-set-key (kbd "C-x |") 'toggle-window-split)
#+END_SRC
** COMMENT Dashboard
   Seems to cause problem when used with emacs server
   Always good to have a dashboard.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package dashboard
  ;;   :preface
  ;;   :init
  ;;   (add-hook 'after-make-frame-functions 'dashboard-refresh-buffer)
  ;;   ;; (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  ;;   :custom (dashboard-startup-banner 'logo)
  ;;   :config (dashboard-setup-startup-hook))
#+END_SRC
** reset config when config.org changes

not-sur to understand how it works
I'm using an =.org= file to maintain my GNU Emacs configuration. However, at his
launch, it will loads the =config.el= source file for a faster loading.

The code below, executes =org-babel-tangle= asynchronously when
=config.org= is saved.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async)

  (defvar *config-file* ".emacs.d/config.org" "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+END_SRC

** Spelling
*** Fly Spell

For the other words that would not be in my list of abbreviations, =flyspell=
enables spell checking on-the-fly in GNU Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flyspell
    :delight
    :custom
      (flyspell-abbrev-p t)
      (flyspell-issue-message-flag nil)
      (flyspell-issue-welcome-flag nil)
      (flyspell-mode 1))
  (use-package flyspell-correct-ivy
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
      (setq flyspell-correct-interface #'flyspell-correct-ivy))
  (use-package ispell
    :custom (ispell-silently-savep t))
#+END_SRC

** History

Provides the ability to have commands and their history saved so that whenever
you return to work, you can re-run things as you need them. This is not a
radical function, it is part of a good user experience.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables
     '(kill-ring
       search-ring
       regexp-search-ring))
    (savehist-file  "~/.emacs.d/history" )
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+END_SRC

** improved package menu =paradox=

Improved GNU Emacs standard package menu.

#+BEGIN_QUOTE
Project for modernizing Emacs' Package Menu. With improved appearance, mode-line
information. Github integration, customizability, asynchronous upgrading, and
more.

[[https://github.com/Malabarba/paradox][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :custom
    (paradox-column-width-package 27)
    (paradox-column-width-version 13)
    (paradox-execute-asynchronously t)
    (paradox-hide-wiki-packages t)
    :config
    (paradox-enable)
    (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+END_SRC

** General
*** =aggressive-indent=

Auto-indent code as you write.

#+BEGIN_QUOTE
=electric-indent-mode= is enough to keep your code nicely aligned when all you
do is type. However, once you start shifting blocks around, transposing lines,
or slurping and barfing sexps, indentation is bound to go wrong.

=aggressive-indent-mode= is a minor mode that keeps your code *always* indented.
It reindents after every change, making it more reliable than
electric-indent-mode.

[[https://github.com/Malabarba/aggressive-indent-mode][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package aggressive-indent
    :hook (prog-mode
           (css-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)
           (js-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode))
    :custom (aggressive-indent-comments-too))
#+END_SRC

*** =move-text=

 Moves the current line (or if marked, the current region's, whole lines).

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :bind (("M-p" . move-text-up)
           ("M-n" . move-text-down))
    :config (move-text-default-bindings))
#+END_SRC

*** =rainbow-mode=

Colorize colors as text with their value.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :delight
    :hook (prog-mode))
#+END_SRC

**** Replace the current file with the saved one :notused:

Avoids call the function or reload Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package autorevert
    :ensure nil
    :delight auto-revert-mode
    :bind ("C-x R" . revert-buffer)
    :custom (auto-revert-verbose nil)
    :config (global-auto-revert-mode 1))
#+END_SRC

#+RESULTS:
: revert-buffer

***  =undo-tree=

GNU Emacs's undo system allows you to recover any past state of a buffer. To do
this, Emacs treats "undo itself as another editing that can be undone".


qsdfqsdfqsdf  fdsqfds

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :delight
    :bind ("C--" . undo-tree-redo)
    :init (global-undo-tree-mode)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+END_SRC

*** =wiki-summary=

It is impossible to know everything, which is why a quick description
of a term, without breaking its workflow, is ideal.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wiki-summary
    :defer 1
    :bind ("C-c W" . wiki-summary)
    :preface
    (defun my/format-summary-in-buffer (summary)
      "Given a summary, stick it in the *wiki-summary* buffer and display the buffer"
      (let ((buf (generate-new-buffer "*wiki-summary*")))
        (with-current-buffer buf
          (princ summary buf)
          (fill-paragraph)
          (goto-char (point-min))
          (text-mode)
          (view-mode))
        (pop-to-buffer buf))))

  (advice-add 'wiki-summary/format-summary-in-buffer :override #'my/format-summary-in-buffer)
#+END_SRC

** =which-key=

It's difficult to remember all the keyboard shortcuts. The =which-key= package
helps to solve this.

I used =guide-key= in my past days, but =which-key= is a good replacement.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :delight
    :config (which-key-mode))
#+END_SRC

#+RESULTS:

** Ivy

I used =helm= before, but I find =ivy= faster and lighter.

#+BEGIN_QUOTE
Ivy is a generic completion mechanism for Emacs. While it operates similarly to
other completion schemes such as icomplete-mode, Ivy aims to be more efficient,
smaller, simpler, and smoother to use yet highly customizable.

[[https://github.com/abo-abo/ivy][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package counsel
    :after ivy
    :delight
    :config (counsel-mode))

  (use-package ivy
    :delight
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
      (ivy-count-format "(%d/%d) ")
      (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)

  (use-package ivy-rich
    :after ivy
    :init (setq ivy-rich-parse-remote-file-path t)
    :config (ivy-rich-mode 1))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC

** Navigation

This function is a mix of =C-a= and =M-m=.

From: http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/smarter-move-beginning-of-line (arg)
  "Moves point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

(global-set-key [remap org-beginning-of-line] #'my/smarter-move-beginning-of-line)
(global-set-key [remap move-beginning-of-line] #'my/smarter-move-beginning-of-line)
#+END_SRC

** Parenthesis =rainbow-delimiters=

#+BEGIN_QUOTE
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights
delimiters such as parentheses, brackets or braces according to their
depth. Each successive level is highlighted in a different color. This makes it
easy to spot matching delimiters, orient yourself in the code, and tell which
statements are at a given depth.

[[https://github.com/Fanael/rainbow-delimiters][Fanael Linithien]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** PDF
#+BEGIN_QUOTE
PDF Tools is, among other things, a replacement of DocView for PDF files. The
key difference is that pages are not pre-rendered by e.g. ghostscript and stored
in the file-system, but rather created on-demand and stored in memory.
[[https://github.com/politza/pdf-tools][Andras Politz]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package pdf-tools
     :magic ("%PDF" . pdf-view-mode)
     :init (pdf-tools-install :no-query))
   (use-package pdf-view
     :ensure nil
     :after pdf-tools
     :bind (:map pdf-view-mode-map
                 ("C-s" . isearch-forward)
                 ("d" . pdf-annot-delete)
                 ("h" . pdf-annot-add-highlight-markup-annotation)
                 ("t" . pdf-annot-add-text-annotation))
     :custom
     (pdf-view-display-size 'fit-page)
     (pdf-view-resize-factor 1.1)
     (pdf-view-use-unicode-ligther nil))
 #+END_SRC

** Point and Region
Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("C-+" . er/contract-region)
           ("C-=" . er/expand-region)))
#+END_SRC

I find useful to delete a line and a region with only =C-w=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC

** Recent Files

Provides fast access to the recent files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package recentf
    :defer 2
    :bind ("C-x r" . recentf-open-files)
    :init (recentf-mode)
    :custom
    (recentf-exclude (list "COMMIT_EDITMSG"
                           "~$"
                           "/scp:"
                           "/ssh:"
                           "/sudo:"
                           "/tmp/"
                           "recentf"
                           ".newsrc-dribble"
                           ))
    (recentf-max-menu-items 15)
    (recentf-max-saved-items 200)
    (recentf-save-file "~/.emacs.d/recentf" )
    :config (run-at-time nil (* 5 60) 'recentf-save-list))
#+END_SRC

** Whitespaces

It is often annoying to see unnecessary blank spaces at the end of a line or file.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :commands delete-trailing-whitespace
    :hook before-save)
#+END_SRC

*** =hungry-delete=

#+BEGIN_QUOTE
Deleting a whitespace character will delete all whitespace until the next
non-whitespace character.

# [[https://github.com/nflath/hungry-delete][Nathaniel Flath]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :delight
    :config (global-hungry-delete-mode))
#+END_SRC

** Windows
Don't ask before killing a buffer. I know what I'm doing.

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key [remap kill-buffer] #'kill-this-buffer)
#+END_SRC


*** =windmove=

# # Allows you to move from one window to another with something more natural than
# # cycling through =C-x o= (=other-window=).

# # #+BEGIN_SRC emacs-lisp :tangle yes
# #   (use-package windmove
# #     :defer 0.2
# #     :bind (("C-c h" . windmove-left)
# #            ("C-c j" . windmove-down)
# #            ("C-c k" . windmove-up)
# #            ("C-c l" . windmove-right)))
# # #+END_SRC

*** =winner=

I often undo's and redo's with window configurations.

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be "undone" using the command =winner-undo=. By default this one is
bound to the key sequence ctrl-c left. If you change your mind (while undoing),
you can press ctrl-c right (calling =winner-redo=).

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/winner.el][Ivar Rummelhoff]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package winner
    :defer 2
    :config (winner-mode 1))
#+END_SRC

** Word Wrap

I like to have lines of the same length.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :delight (auto-fill-function)
    :bind ("C-x p" . pop-to-mark-command)
    :hook ((prog-mode . turn-on-auto-fill)
           (text-mode . turn-on-auto-fill))
    :custom (set-mark-command-repeat-pop t))
#+END_SRC


** custom fonction
#+BEGIN_SRC emacs-lisp :tangle yes
;; revert all open file buffer
(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
        (revert-buffer t t t) )))
  (message "Refreshed open files.") )

;; reload emacs config
(defun reload-dotemacs-file ()
  "reload your .emacs file without restarting Emacs"
  (interactive)
  (load-file "~/.emacs.d/init.el"))

#+END_SRC

* Major mode
** Languages
   test test
*** Emacs Lisp
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package elisp-mode :ensure nil :delight "ξ ")
 #+END_SRC
**** Eldoc

 Provides minibuffer hints when working with Emacs Lisp.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package eldoc
     :delight
     :hook (emacs-lisp-mode . eldoc-mode))
 #+END_SRC

*** Markdown
 Before you can use this package, make sure you install =markdown= on your
 operating system.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package markdown-mode
     :delight "μ "
     :mode ("INSTALL\\'"
            "CONTRIBUTORS\\'"
            "LICENSE\\'"
            "README\\'"
            "\\.markdown\\'"
            "\\.md\\'"))
 #+END_SRC

*** LaTeX
 I use LaTeX for my reports, CVs, summaries, etc.

 #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package tex
        :ensure auctex
        :hook (LaTeX-mode . reftex-mode)
        :custom
        (TeX-PDF-mode t)
        (TeX-auto-save t)
        (TeX-byte-compile t)
        (TeX-clean-confirm nil)
        (TeX-master 'dwim)
        (TeX-parse-self t)
        (TeX-source-correlate-mode t)
        (TeX-view-program-selection '((output-pdf "Evince")
                                      (output-html "xdg-open"))))

      (use-package bibtex
        :after auctex
        :hook (bibtex-mode . my/bibtex-fill-column))

      ;; (use-package company-auctex
      ;;   :after (auctex company)
      ;;   :config (company-auctex-init))

      ;; (use-package company-math
      ;;     :after (auctex company))
 #+END_SRC

 #+RESULTS:

 I want a TeX engine that can deal with Unicode and use any font I like.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default TeX-engine 'xetex)
 #+END_SRC

**** =reftex=

 Minor mode with distinct support for \label, \ref and \cite in LaTeX.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package reftex :after auctex)
 #+END_SRC
*** Cobol
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package cobol-mode
  :mode ("\\.cbl\\'" "\\.cpy\\'" "\\.pco\\'"))
 #+END_SRC
*** COQ
 #+BEGIN_SRC emacs-lisp :tangle yes
;; (eval-after-load 'proof-script
;;   '(progn
;;      ;; (define-key proof-mode-map "\M-e" 'move-end-of-line)
;;      ;; (define-key proof-mode-map "\M-a" 'move-beginning-of-line)
;;      ;; (define-key proof-mode-map "\M-n"
;;      ;;   'proof-assert-next-command-interactive)
;;      ;; (define-key proof-mode-map "\M-p"
;;      ;;   'proof-undo-last-successful-command)
;;      (define-key proof-mode-map (kbd "\C-p") 'coq-About)
;;      (define-key proof-mode-map (kbd "\C-c\C-k")
;;        'proof-goto-point)
;;      ))
;; ;; Better indent for ssreflect
;; (setq coq-one-command-per-line nil)
;; (setq coq-indent-proofstart 0)
;; (setq coq-indent-modulestart 0)
;; ;; ;; input math symbol
;; (add-hook 'proof-mode-hook (lambda () (set-input-method "TeX") ))
;; ;; Open .v files with Proof General's Coq mode
;; (require 'proof-site "~/.emacs.d/lisp/PG/generic/proof-site")
 #+END_SRC

*** OCamla
 #+BEGIN_SRC emacs-lisp :tangle yes
   ;; (setq utop-command "opam config exec -- utop -emacs")
   ;; (add-to-list 'load-path
   ;;              "/home/baroud/.opam/4.07.1+flambda/share/emacs/site-lisp")
   ;; (require 'ocp-indent)
      (setq utop-command "opam config exec -- utop -emacs")
      (add-to-list 'load-path
                   "/home/baroud/.opam/4.07.1+flambda/share/emacs/site-lisp")
       ;; (use-package ocp-indent
      ;; after:)
#+END_SRC
*** Java
**** Antlr
     lexer/parser generator LL(*) for java langage
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package antlr-mode
      :mode ("\\.g4\\'"))
  #+END_SRC

**** Groovy
     Script version of java
     run on jvm
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package groovy-mode
      :mode ("\\.groovy\\'" "\\.gvy\\'" "\\.gy\\'""\\.gsh\\'" )
      :hook gradle-mode)
  #+END_SRC
**** Gradle
     Gradle is a dependency manager
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package gradle-mode
      :mode ("\\.gradle\\'")
      )

  #+END_SRC

*** Typescript
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package typescript-mode
    :mode ("\\.ts\\'"))
 #+END_SRC

*** Yaml
    Yet another marked langage
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package yaml-mode
     :mode ("\\.yml\\'"))
 #+END_SRC
*** config
**** Git config file
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package gitignore-mode)
 #+END_SRC

** Ledger
*** [[https://www.youneedabudget.com/the-four-rules/][YNAB]]
    You need a budged : four simple rule to control you budged
**** Give Every Dollar a Job
     As soon as you get money, you’ll decide what it needs to do—whatever is most
     important to you. Then, instead of deciding to buy something based on your
    mood, or the big (or small?) pile of money in your checking account, you’ll
    decide based on a rock-solid plan.

     1. Get some dollars.
     2. Prioritize those dollars (give ‘em jobs!).
     3. Follow your plan.
****  Embrace Your True Expenses
     Take those large, less-frequent expenses (that usually send you into a financial
     tailspin) and break them into manageable, monthly “bills.” Good-bye, Financial
     Crisis Roller Coaster! You just won a free ticket on the Financial Peace
     Express!

     1. Find a big, infrequent expense.
     2. Create a goal to fund it monthly.
     3. When that expense arrives, just pay it!
**** Roll With The Punches
     When you overspend in a budget category, just adjust. No guilt necessary. If you
     plan to take the kids to the beach but it’s pouring down rain, do you still go?
     Of course not! Circumstances change and plans change with them. Your budget is
     no different. If you overspend in one category, free up money from another
     category and move along. Remember, you’re the boss!

     1. Choose a category with overspending.
     2. Move funds from another category to cover it.
     3. Move on with your life—no guilt!
**** Age Your Money
     With the help of the other three rules, you’ll be more purposeful about your
     spending, consistently spend less than you earn, and be more than prepared for
     the future. Eventually, you’ll be able to cover May’s rent with dollars from
     April. Your money will be at least 30 days old and you’ll wonder how you ever
     lived without the Four Rules.

     1. Be purposeful in your spending.
     2. Consistently spend less than you earn.
     3. Watch that Age of Money grow!


 #+BEGIN_QUOTE
 Ledger is a powerful, double-entry accounting system that is accessed from the
 UNIX command-line.
*** ledger capture
 [[https://github.com/ledger/ledger][John Wiegley]]
 #+END_QUOTE

 Before you can use this configuration, make sure you install =ledger= on your
 operating system.

 Now all we have to do is configure =ledger-mode=:

 #+begin_SRC emacs-lisp :tangle yes
   (use-package ledger-mode
     :mode ("\\.dat\\'" "\\.ledger\\'")
     :bind (:map ledger-mode-map ("c-x c-s" . my/ledger-save))
     :hook (ledger-mode . ledger-flymake-enable)
     :preface
     (defun my/ledger-save ()
       "automatically clean the ledger buffer at each save."
       (interactive)
       (ledger-mode-clean-buffer)
       (save-buffer))
     :custom
     (ledger-clear-whole-transactions t)
     (ledger-reconcile-default-commodity "eur")
     (ledger-reports
      '(("account statement" "%(binary) reg --real [[ledger-mode-flags]] -f %(ledger-file) ^%(account)")
        ("balance sheet" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) bal ^assets ^liabilities ^equity")
        ("budget" "%(binary) --empty -s -t [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:budget")
        ("budget goals" "%(binary) --empty -s -t [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget goals'")
        ("budget obligations" "%(binary) --empty -s -t [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget obligations'")
        ("budget debts" "%(binary) --empty -s -t [[ledger-mode-flags]] -f %(ledger-file) bal ^assets:bank ^assets:receivables ^assets:cash ^assets:'budget debts'")
        ("cleared" "%(binary) cleared [[ledger-mode-flags]] -f %(ledger-file)")
        ("equity" "%(binary) --real [[ledger-mode-flags]] -f %(ledger-file) equity")
        ("income statement" "%(binary) --invert --real -s -t [[ledger-mode-flags]] -f %(ledger-file) bal ^income ^expenses -p \"this month\""))
      (ledger-report-use-header-line nil)))

      (use-package flycheck-ledger :after ledger-mode)
 #+end_src
 *note:* by default, =ledger= uses the [[ https://xkcd.com/1179/][iso 8601]] format to write dates, which is the recommended
 format.

** Org

 One of my favorite modes in GNU Emacs. I mainly use it to organize my life,
 take notes and make my presentations, but you can do lots of things with
 it. =org-mode= it's like the sky, without limits.

 #+BEGIN_QUOTE
 Org mode is for keeping notes, maintaining TODO lists, planning projects, and
 authoring documents with a fast and effective plain-text system.

 [[http://orgmode.org/][Carsten Dominik]]
 #+END_QUOTE

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org
     :ensure org-plus-contrib
     :delight "Θ "
     :bind
      ("C-c l" . org-store-link)
      ("C-c a" . org-agenda)
      ("C-c c" . org-capture)
     :custom
        (org-use-extra-keys t)
        (org-catch-invisible-edits 'show-and-error)
        (org-cycle-separator-lines 0))
 #+END_SRC
*** Table of Content
    If like me, you're tired of manually updating your tables of contents, =toc-org=
    will maintain a table of contents at the first heading that has a =:TOC:= tag.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package toc-org
     :after org
     :hook (org-mode . toc-org-enable))
 #+END_SRC
*** cleaner indentation

 For a cleaner online mode.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-indent :after org :ensure nil :delight)
 #+END_SRC

*** Agenda

 Nowadays, it is crucial to be organized. Even more than before. That is why it
 is important to take the time to make a configuration that is simple to use and
 that makes your life easier with an irreproachable organization.

 =org-agenda= allows me to be organized with daily tasks. As a result, I can use
 my time to the fullest.

 #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package org-agenda
        :ensure nil
        :after org
        :custom
        (org-directory "~/org")
        (org-agenda-files '("~/org/")
        (org-agenda-dim-blocked-tasks t)
        (org-agenda-inhibit-startup t)
        (org-agenda-show-log t)
        (org-agenda-skip-deadline-if-done t)
        (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
        (org-agenda-skip-scheduled-if-done t)
        (org-agenda-span 2)
        (org-agenda-sticky nil)
        (org-agenda-tags-column -100)
        (org-agenda-time-grid '((daily today require-timed)))
        (org-agenda-use-tag-inheritance t)
        (org-enforce-todo-dependencies t)
        (org-habit-graph-column 80)
        (org-habit-show-habits-only-for-today nil)
        (org-track-ordered-property-with-tag t))
        (org-agenda-custom-commands
          (quote
          (("z" "Clean agenda" agenda ""
          ((org-agenda-tag-filter-preset
            (quote  ("-volim" "-hidden")))))))))


     (use-package calfw :after org-agenda)

     (use-package calfw-org
        :after calfw
        :bind ("C-c z" . cfw:open-org-calendar)
        :custom
        cfw:org-overwrite-default-keybinding t)

 #+END_SRC

*** Bullets

 Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-bullets
     :hook (org-mode . org-bullets-mode)
     :custom (org-bullets-bullet-list '("●" "▲" "■" "✶" "◉" "○" "○")))
 #+END_SRC

*** Capture
 =org-capture= templates saves you a lot of time when adding new entries. I use
 it to quickly record tasks, ledger entries, notes and other semi-structured
 information.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-capture
     :ensure nil
     :after org
     :preface
     (defun org-capture-template-goto-link ()
          "Set point for capturing at what capture target file+headline with headline set to %l would do."
          (org-capture-put :target (list 'file+headline (nth 1 (org-capture-get :target))
                                                               (org-capture-get :annotation)))
          (org-capture-put-target-region-and-position)
          (widen)
          (let ((hd (nth 2 (org-capture-get :target))))
               (goto-char (point-min))
               (if (re-search-forward
                   (format org-complex-heading-regexp-format (regexp-quote hd)) nil t)
               (goto-char (point-at-bol))
               (goto-char (point-max))
               (or (bolp) (insert "\n"))
               (insert "* " hd "\n")
               (beginning-of-line 0))))

     (defvar my/org-people-template "** %\\1 %\\2
   :PROPERTIES:
   :Nombre:        %^{Nombre}
   :Apellido:      %^{Apellido}%?
   :Compleanos:    %^{Fecha de nacimiento}u
   :Telefono:      %^{Telefono}
   :Correo:        %^{Correo}
   :Direccion:     %^{Direccion}
   :Ciudad:        %^{Ciudad}
   :Pais:          %^{Pais}
   :Codigo postal: %^{Codigo postal}
   :Map:      [[google-maps:%\\5+%\\6+%\\7+%\\8][Google Maps]]
   :Nota:
   :END:"
   )

   (defvar my/org-adress-template "** %\\1
   :PROPERTIES:
   :Nombre:        %^{Nombre}
   :Telefono:      %^{Telefono}
   :Correo:        %^{Correo}
   :Direccion:     %^{Direccion}
   :Ciudad:        %^{Ciudad}
   :Pais:          %^{Pais}
   :Codigo postal: %^{Codigo postal}
   :Map:      [[google-maps:%\\5+%\\6+%\\7+%\\8][Google Maps]]
   :END: "
   )

   (defvar my/org-espectaculo-template "*** %\\1
   :PROPERTIES:
   :nombre:   %^{Nombre}
   :tipo:     %^{tipo}p
   :lugar:    %^{Lugar}
   :con:      %^{Con}
   :cuando:   %^{Cuando}t
   :END: "
   )

   (defvar my/org-personal-template "*** %\\1
   :PROPERTIES:
   :nombre:   %^{Nombre}
   :lugar:    %^{Lugar}
   :con:      %^{Con}
   :cuando:   %^{Cuando}t
   :END: "
   )

   (defvar my/org-transporte-template "** %\\1 -> %\\2
   :PROPERTIES:
   :de:       %^{de}
   :a:        %^{a}
   :tipo:     %^{tipo}p
   :con:      %^{Con}
   :cuando:   %^{Cuando}t
   :END: "
   )

   (defvar my/org-ida-vuelta-template "** %\\1 -> %\\2
   :PROPERTIES:
   :de:       %^{de}
   :a:        %^{a}
   :tipo:     %^{tipo}p
   :con:      %^{Con}
   :cuando:   %^{Cuando}t
   :END:
   ,** %\\2 -> %\\1
   :PROPERTIES:
   :de:       %\\2
   :a:        %\\1
   :tipo:     %^{tipo}p
   :con:      %^{Con}
   :cuando:   %^{Cuando}t
   :END: "
   )

   (defvar my/org-administrativod-template "** TODO %^{Que}
   DEADLINE:   %^{Fecha tope}t
   ")

   (defvar my/org-administrativos-template "** TODO %^{Que}
   SCHEDULED:   %^{Programado}t
   ")

   (defvar my/org-administrativo-template  "** TODO %^{Que}
   :PROPERTIES:
   :cuando:   %^{Cuando}t
   :END:")

   :custom
   (org-capture-templates `(
   ("c" "Contact")
      ("cg" "Gente" entry (file+headline "~/org/contacts.org" "People"),
           my/org-people-template :empty-lines 1)
      ("ca" "Lugar" entry (file+headline "~/org/contacts.org" "Adress"),
           my/org-people-template :empty-lines 1)
   ("e" "Evento")
      ("es" "Espectaculo" entry (file+headline "~/org/diario.org" "Espectaculo"),
           my/org-espectaculo-template :empty-lines 1)
      ("ep" "Personal" entry (file+headline "~/org/diario.org" "Personal"),
           my/org-personal-template :empty-lines 1)
   ("v" "Viaje")
      ("vi" "Viaje individual" entry (file+headline "~/org/diario.org" "Transporte"),
           my/org-transporte-template :empty-lines 1)
      ("vv" "Viaje ida y vulta" entry (file+headline "~/org/diario.org" "Transporte"),
           my/org-ida-vuelta-template :empty-lines 1)
   ("a" "Administrativo")
      ("am" "meeting" entry (file+headline "~/org/diario.org" "Administrativo"),
           my/org-administrativo-template :empty-lines 1)
      ("as" "scheduled" entry (file+headline "~/org/diario.org" "Administrativo"),
           my/org-administrativos-template :empty-lines 1)
      ("ad" "deadline" entry (file+headline "~/org/diario.org" "Administrativo"),
           my/org-administrativod-template :empty-lines 1))))

 #+END_SRC

*** Clock

 # # Being organized is one thing, but being optimal is another. =org-clock= allows
 # # you to estimate your tasks and time them. This is useful, since with experience,
 # # you can have a better estimate of the time that needs to be given to each task.

 # # #+BEGIN_SRC emacs-lisp :tangle yes
 # #   (use-package org-clock
 # #     :ensure nil
 # #     :after org
 # #     :preface
 # #     (defun my/org-mode-ask-effort ()
 # #       "Ask for an effort estimate when clocking in."
 # #       (unless (org-entry-get (point) "Effort")
 # #         (let ((effort
 # #                (completing-read
 # #                 "Effort: "
 # #                 (org-entry-get-multivalued-property (point) "Effort"))))
 # #           (unless (equal effort "")
 # #             (org-set-property "Effort" effort)))))
 # #     :hook (org-clock-in-prepare-hook . my/org-mode-ask-effort)
 # #     :custom
 # #     (org-clock-clocktable-default-properties
 # #      '(:block day :maxlevel 2 :scope agenda :link t :compact t :formula %
 # #               :step day :fileskip0 t :stepskip0 t :narrow 80
 # #               :properties ("Effort" "CLOCKSUM" "CLOCKSUM_T" "TODO")))
 # #     (org-clock-continuously nil)
 # #     (org-clock-in-switch-to-state "STARTED")
 # #     (org-clock-out-remove-zero-time-clocks t)
 # #     (org-clock-persist t)
 # #     (org-clock-persist-file (expand-file-name (format "%s/emacs/org-clock-save.el" xdg-cache)))
 # #     (org-clock-persist-query-resume nil)
 # #     (org-clock-report-include-clocking-task t)
 # #     (org-show-notification-handler (lambda (msg) (alert msg))))
 # # #+END_SRC

*** Contacts
    The best solution to maintain your contacts. I tend to use =org-contacts= to
    remember their birthdays so I can be the first to wish them that. Be careful
    that to install it, this one is available with =org-plus-contrib=.
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-contacts
     :ensure nil
     :after org
     :custom (org-contacts-files '("~/org/contacts.org")))
 #+END_SRC

*** Custormization

 Let's change the foreground and the weight of each keywords.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-faces
     :ensure nil
     :after org
     :custom
     (org-todo-keyword-faces
      '(("DONE" . (:foreground "cyan" :weight bold))
        ("SOMEDAY" . (:foreground "gray" :weight bold))
        ("TODO" . (:foreground "green" :weight bold))
        ("WAITING" . (:foreground "red" :weight bold)))))
 #+END_SRC

*** COMMENT Encryption / Decryption

 To be able to enable encryption and decryption of =.gpg= files with =org-mode=,
 we will need to install =gnupg2=.

 Once this is done, we simply configure =org-crypt= to accept our public key
 identifier to allow asymmetric encryption.

 *NOTE:* you need to modify the =org-crypt-key= variable to replace my key
 identifier, by yours (or =nil= to allow symmetric encryption).

 # #+BEGIN_SRC emacs-lisp :tangle yes
 #   (use-package org-crypt
 #     :ensure nil
 # 	:after org
 #     :init (org-crypt-use-before-save-magic)
 #     :custom (org-crypt-key "E9AADC36E94A672D1A07D49B208FCDBB98190562"))
 # #+END_SRC

*** Journal

 # # Recently, I started writing a journal about my daily life as I read that
 # # journals improve mental claritym, help solve problems, improve overall focus,
 # # insight and understanding, track the overall development and facilitate personal
 # # growth.

 # # #+BEGIN_SRC emacs-lisp :tangle yes
 # #   (use-package org-journal
 # #     :after org
 # #     :bind (("C-c t" . org-journal-new-entry)
 # #            ("C-c Y" . journal-file-yesterday))
 # #     :preface
 # #     (defun get-journal-file-yesterday ()
 # #       "Gets filename for yesterday's journal entry."
 # #       (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
 # #              (daily-name (format-time-string "%Y%m%d" yesterday)))
 # #         (expand-file-name (concat org-journal-dir daily-name))))

 # #     (defun journal-file-yesterday ()
 # #       "Creates and load a file based on yesterday's date."
 # #       (interactive)
 # #       (find-file (get-journal-file-yesterday)))
 # #     :custom
 # #     (org-journal-date-format "%e %b %Y (%A)")
 # #     (org-journal-dir "~/.personal/journal/2018/")
 # #     (org-journal-enable-encryption t)
 # #     (org-journal-file-format "%Y%m%d")
 # #     (org-journal-time-format ""))
 # # #+END_SRC

*** Languages

 With that, I can compile many languages with =org-mode=.

 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package ob-C :ensure nil :after org)
   ;; (use-package ob-css :ensure nil :after org)
   ;; (use-package ob-ditaa :ensure nil :after org)
   ;; (use-package ob-dot :ensure nil :after org)
   (use-package ob-emacs-lisp :ensure nil :after org)
   ;; (use-package ob-gnuplot :ensure nil :after org)
   (use-package ob-java :ensure nil :after org)
   (use-package ob-js :ensure nil :after org)
   (use-package ob-latex :ensure nil :after org)
   (use-package ob-ledger :ensure nil :after org)
   (use-package ob-makefile :ensure nil :after org)
   (use-package ob-org :ensure nil :after org)

   ;; (use-package ob-plantuml
   ;;   :ensure nil
   ;;   :after org
   ;;   :custom (org-plantuml-jar-path (expand-file-name (format "%s/plantuml.jar" xdg-lib))))

   ;; (use-package ob-python :ensure nil :after org)
   ;; (use-package ob-ruby :ensure nil :after org)
   (use-package ob-shell :ensure nil :after org)
   (use-package ob-sql :ensure nil :after org)
 #+END_SRC

*** Other improvment
 #+BEGIN_SRC emacs-lisp :tangle yes
 (defun org-convert-csv-table (beg end)
 (interactive (list (mark) (point)))
 (org-table-convert-region beg end ";")
  )

 #+END_SRC

** Mail ==gnus==
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package gnus
      :bind (("C-x e" . gnus)
            :map gnus-group-mode-map
            ("C-c C-f" . gnus-summary-mail-forward))
      :custom
      (gnus-fetch-old-headers t))
    (use-package w3m
      :after gnus)
#+END_SRC

** Contact ==bbdb==

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bbdb
    :after gnus)
  (use-package bbdb-vcard
    :after bbdb)
  ;; (use-package vdirel
  ;;   :custom
  ;;   (vdirel-repository ~/Contacts))
#+END_SRC

** Git ==magit==

It is quite common to work on Git repositories, so it is important to have a
configuration that we like.

#+BEGIN_QUOTE
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.

[[https://github.com/tarsius][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
     ;; :defer 0.3
     :bind ("C-x g" . magit-status)
  )
  (use-package git-commit
    :after magit
    :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
    :custom (git-commit-summary-max-length 50)
    :preface
    (defun my/git-commit-auto-fill-everywhere ()
      "Ensures that the commit body does not exceed 72 characters."
      (setq fill-column 72)
      (setq-local comment-auto-fill-only-comments nil)))
#+END_SRC

In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-gutter
    :defer 0.3
    :delight
    :init (global-git-gutter-mode +1))
#+END_SRC

Finally, one last package that I like to use with Git to easily see the changes
made by previous commits.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package git-timemachine
   :defer 1
   :delight)
#+END_SRC

** File Explorer ==dired==
   Dired is a major mode for exploring file
   dired-x is a minor that brings a lot to dired like hidding
   - uninteresting file
   - guessing which command to call...
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired
    :ensure nil
    :delight "Dired "
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-omit-files "^\\...+$")
    (dired-omit-mode t)
    (dired-listing-switches "-alh")
    (dired-ls-F-marks-symlinks nil)
    (dired-recursive-copies 'always))

  (use-package dired-x
    :ensure nil )
#+END_SRC
** password-store ==pass==
   Pass helps me to be a bit more secure on my password management
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pass
    :delight "Pass")
#+END_SRC
** IRC ==erc==
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package erc
  ;;   :commands (erc erc-tls)
  ;;   :bind (:map erc-mode-map))
  ;; (use-package erc-join
  ;;  :after erc
  ;;  :custom
  ;;  (erc-autojoin-mode 1)
  ;;  (setq erc-autojoin-channels-alist
  ;;         '(("freenode.net" "#emacs" "#gnus" "#latex" "#freestream"))))
#+END_SRC
