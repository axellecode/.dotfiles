#+TITLE: GNU Emacs confidguration
#+AUTHOR: Sylvain Ribstein

* Table of content :TOC:
- [[#global-configuration][Global configuration]]
  - [[#packages][Packages]]
  - [[#configuration][configuration]]
  - [[#backup][Backup]]
  - [[#apparence][apparence]]
- [[#mini-buffer][Mini-buffer]]
  - [[#parameter][parameter]]
  - [[#auto-completion-engine-ivy][Auto-completion engine =ivy=]]
  - [[#search-in-current-buffer-swiper][search in current buffer =swiper=]]
  - [[#search-somewhere-else-m-xdiredetc-counsel][search somewhere else "M-x/dired/etc" =counsel=]]
  - [[#improved-text-search-ripgrep][improved text search =ripgrep=]]
  - [[#open-with-sudo-auto-sudoedit][open with sudo =auto-sudoedit=]]
  - [[#hintsinformation-of-current-mark-eldoc][hints/information of current mark =eldoc=]]
  - [[#keystroke-helper-which-key][keystroke helper =which-key=]]
- [[#mode-line][Mode-line]]
  - [[#parameter-1][Parameter]]
  - [[#mode-icons-delight][Mode icons =delight=]]
  - [[#indicate-position-on-file---nyan][Indicate position on file   =nyan=]]
- [[#interface-interaction][Interface interaction]]
  - [[#buffer][Buffer]]
  - [[#window][Window]]
- [[#edition][Edition]]
  - [[#parameter-2][Parameter]]
  - [[#delete-til-next-char-hungry-delete][Delete til next char =hungry-delete=]]
  - [[#move-text-move-text][Move text =move-text=]]
  - [[#whitespace-whitespace][Whitespace =whitespace=]]
  - [[#auto-completion-company][Auto-Completion =company=]]
  - [[#edit-all-occurence-iedit][Edit all occurence =iedit=]]
  - [[#auto-indentation-aggressive-indent][Auto-indentation =aggressive-indent=]]
  - [[#decoration][Decoration]]
  - [[#specific][Specific]]
- [[#project][Project]]
  - [[#interaction-projectile][interaction =projectile=]]
  - [[#git][Git]]
- [[#system-interaction][System interaction]]
  - [[#file-explorer-dired][File explorer =dired=]]
  - [[#shell-command-exec-path-from-shell][shell command =exec-path-from-shell=]]
- [[#mail-gnus][Mail =gnus=]]
- [[#media][media]]
  - [[#mpd-interface-mpdel][mpd interface =mpdel=]]
- [[#organisercalendarlinkeretc-org-mode][Organiser/calendar/linker/etc =org-mode=]]
  - [[#table-of-content-toc-org][Table of content =toc-org=]]
  - [[#org-indentation-org-indent][org indentation =org-indent=]]
  - [[#bullets-org-bullets][bullets =org-bullets=]]
  - [[#face-of-todo][face of TODO]]
  - [[#agenda][Agenda]]
  - [[#capture-org-capture][Capture =org-capture=]]
- [[#start-up][Start-up]]
  - [[#dashboard][Dashboard]]

* Global configuration
Here is configuration that is used across all emacs mode
** Packages
*** Sources
The sources of package. So
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-archives
 '(("gnu" . "http://elpa.gnu.org/packages/") ;; Official
   ("melpa" . "http://melpa.org/packages/")  ;; Unofficial but use everywhere
   ("org" . "http://orgmode.org/elpa/")      ;; Org-mode package source
))
#+END_SRC
*** Configuration =use-package=
Use package allow to install and configure package in a fancy way.
It permit also to defer loading of package.
src: https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp :tangle yes
    (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

(use-package use-package-ensure-system-package
 :ensure t
 :custom
 (use-package-always-ensure t)) ; Avoid the :ensure keyword for each package
(use-package use-package-ensure-system-package)
#+END_SRC
*** update =auto-package-update=
Update current package
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-package-update
    :defer t
    :custom
     (auto-package-update-interval 1)
     (auto-package-update-delete-old-versions  t)
     (auto-package-update-hide-results         t)
     (auto-package-update-prompt-before-update ))
  (if (daemonp)
    (add-hook 'after-make-frame-functions
       (lambda (frame) (auto-package-update-maybe)))
    (progn (auto-package-update-maybe)))
#+END_SRC


*** menu/search =paradox=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paradox
:init (paradox-enable)
:custom
(paradox-column-width-package 27)
(paradox-column-width-version 13)
(paradox-execute-asynchronously t)
(paradox-hide-wiki-packages t)
:config
(setq paradox-github-token (cadr (auth-source-user-and-password "api.github.com" "sribst^paradox")))
(paradox-enable)
(remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+END_SRC

** configuration
*** "global variable"
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default
  inhibit-startup-screen t ; Disable start-up screen
  initial-scratch-message "" ; Empty the initial *scratch* buffer
  initial-major-mode 'text-mode ; major mode of  *scratch* buffer
  ad-redefinition-action 'accept ; Silence warnings for redefinition
  fill-column 80 ; Set width for automatic line breaks
  help-window-select t ; Focus new help windows when opened
  load-prefer-newer t ; Prefers the newest version of a file
  scroll-conservatively most-positive-fixnum ; Always scroll by one line
)
(cd "~/") ; Move to the user directory
(set-default-coding-systems 'utf-8) ; Default to utf-8 encoding
#+END_SRC
*** Customization
To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default custom-file (expand-file-name "~/.emacs.d/custom.el"))
(when (file-exists-p custom-file) (load custom-file t))
#+END_SRC

*** update
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async)
(defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
  "The configuration file.")

(defvar *config-last-change* (nth 5 (file-attributes *config-file*))
  "Last modification time of the configuration file.")

(defvar *show-async-tangle-results* nil "Keeps *emacs* async buffers around for later inspection.")

(defun my/config-updated ()
  "Checks if the configuration file has been updated since the last time."
  (time-less-p *config-last-change*
               (nth 5 (file-attributes *config-file*))))

(defun my/async-babel-tangle (org-file)
  "Tangles the org file asynchronously."
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
     (unless *show-async-tangle-results*
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
           (message "ERROR: %s as tangle failed." ,org-file)))))))

(defun my/config-tangle ()
  "Tangles the org file asynchronously."
  (when (my/config-updated)
    (setq *config-last-change*
          (nth 5 (file-attributes *config-file*)))
    (my/async-babel-tangle *config-file*)))

(defun my/reload-config-file ()
  "reload config of emacs on-the-fly"
  (interactive)
  (load-file (expand-file-name "config.el" user-emacs-directory)))

(defun my/force-update-config ()
  "Force the update of the configuration."
  (interactive)
  (org-babel-load-file (expand-file-name "config.org" user-emacs-directory))
)
#+END_SRC

#+RESULTS:
: my/force-update-config


** Backup
It is important to have a stable backup environment.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package files
    :ensure nil ; don't need to ensure as it is default package
    :custom
    (backup-directory-alist `(("." . "~/.emacs.d/backup")))
    (delete-old-versions -1)
    (vc-make-backup-files t)
    (version-control t))
#+END_SRC
** apparence
*** Turn off mouse interface
Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.
#+BEGIN_SRC emacs-lisp :tangle yes
    (menu-bar-mode -1)                              ; Disable the menu bar
    (scroll-bar-mode -1)                            ; Disable the scroll bar
    (tool-bar-mode -1)                              ; Disable the tool bar
    (tooltip-mode -1)                               ; Disable the tooltips
#+END_SRC
*** Theme
xresources-theme qui respect les couleurs de Xressources
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package xresources-theme :defer t
    :config
    (set-face-attribute 'region nil :background (x-get-resource "color12" ""))
    (set-face-background 'hl-line (x-get-resource "color8" "")))
    :init
    (defvar my/theme 'xresources)
    (defvar my/theme-window-loaded nil)
    (defvar my/theme-terminal-loaded nil)

    (if (daemonp)
        (add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (if (window-system frame)
                (unless my/theme-window-loaded
                  (if my/theme-terminal-loaded
                      (enable-theme my/theme)
                      (load-theme my/theme t))
                  (setq my/theme-window-loaded t))
                (unless my/theme-terminal-loaded
                  (if my/theme-window-loaded
                    (enable-theme my/theme)
                  (load-theme my/theme t))
                (setq my/theme-terminal-loaded t)))))
         (progn
            (load-theme my/theme t)
            (if (display-graphic-p)
              (setq my/theme-window-loaded t)
              (setq my/theme-terminal-loaded t))))
#+END_SRC

#+RESULTS:
| (lambda (frame) (select-frame frame) (if (window-system frame) (unless my/theme-window-loaded (if my/theme-terminal-loaded (enable-theme my/theme) (load-theme my/theme t)) (setq my/theme-window-loaded t)) (unless my/theme-terminal-loaded (if my/theme-window-loaded (enable-theme my/theme) (load-theme my/theme t)) (setq my/theme-terminal-loaded t)))) | (lambda (frame) (select-frame frame) (if (window-system frame) (if my/theme-window-loaded nil (if my/theme-terminal-loaded (enable-theme my/theme) (load-theme my/theme t)) (setq my/theme-window-loaded t)) (if my/theme-terminal-loaded nil (if my/theme-window-loaded (enable-theme my/theme) (load-theme my/theme t)) (setq my/theme-terminal-loaded t)))) | (lambda (frame) (auto-package-update-maybe)) | x-dnd-init-frame |

*** font
**** icons ==all-the-icons=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons)
#+END_SRC
* Mini-buffer
** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p) ; Replace yes/no prompts with y/n
#+END_SRC

#+RESULTS:
: y-or-n-p

** Auto-completion engine =ivy=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :demand ;force-loading
    :delight
    :bind ("C-x B" . ivy-switch-buffer-other-window)
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    (ivy-extra-directories nil)
    (ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)
    :config (ivy-mode))
    (use-package ivy-rich
    :after ivy
    :init (setq ivy-rich-parse-remote-file-path t)
    :config (ivy-rich-mode 1))

    (use-package all-the-icons-ivy
:after ivy
:config (all-the-icons-ivy-setup))
    #+END_SRC

*** TODO improved ivy file browsing =ivy-explorer=
not working  'Error in post-command-hook (ivy--queue-exhibit): (arith-error)'

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ivy-explorer
  ;;  :after ivy counsel
  ;;  :config (ivy-explorer-mode 1))
  #+END_SRC

** search in current buffer =swiper=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package swiper
  :after ivy
  :config
  (custom-set-faces '(swiper-minibuffer-match-face-1 ((t
     :background (x-get-resource "color11" ""))))
     '(swiper-minibuffer-match-face-2 ((t
     :background (x-get-resource "color9" "") :weight bold)))
     '(swiper-minibuffer-match-face-3 ((t
     :background (x-get-resource "color10" "") :weight bold)))
     '(swiper-minibuffer-match-face-4 ((t
     :background (x-get-resource "color12" "") :weight bold))))

     ;;    (custom-set-faces
  ;; '(swiper-minibuffer-match-face-1 ((t :background "#dddddd")))
  ;; '(swiper-minibuffer-match-face-2 ((t :background "#bbbbbb" :weight bold)))
  ;; '(swiper-minibuffer-match-face-3 ((t :background "#bbbbff" :weight bold)))
  ;; '(swiper-minibuffer-match-face-4 ((t :background "#ffbbff" :weight bold))))

     :bind ("C-s" . swiper))
     #+END_SRC

** search somewhere else "M-x/dired/etc" =counsel=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smex)
(use-package counsel
  :after ivy smex
  :delight
  :init (counsel-mode 1))
#+END_SRC

** improved text search =ripgrep=
ripgrep is an alternative of grep that is faster and respect .gitignore
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ripgrep
:delight
:ensure-system-package (rg . "yay -S ripgrep"))
#+END_SRC
** open with sudo =auto-sudoedit=
automaticaly open with tramp when needed
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tramp
  :ensure nil
  :custom (tramp-default-method "sshx"))
(use-package auto-sudoedit
  :init (auto-sudoedit-mode 1))
(use-package counsel-tramp
  :bind ("C-c s" . counsel-tramp)
  :after counsel)
#+END_SRC

** hints/information of current mark =eldoc=
Provides minibuffer hints when working with Emacs Lisp.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eldoc
  :delight
  :hook ((prog-mode org-mode) . eldoc-mode))
#+END_SRC
** keystroke helper =which-key=
=which-key= show all possible completion after a keystroke
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :delight
  :config (which-key-mode))
#+END_SRC
* Mode-line
** Parameter
#+BEGIN_SRC emacs-lisp :tangle yes
(column-number-mode 1) ; Show the column number
#+END_SRC
** Mode icons =delight=
delight is a way of showing wich major/minor is currently open
It's show which mode on the main bar
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package delight)
#+END_SRC
** Indicate position on file   =nyan=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nyan-mode
  :config (nyan-mode)
  :custom
  (nyan-animate-nyancat t)
  (nyan-wavy-trail t)
  (nyan-bar-length 15))
#+END_SRC

#+RESULTS:
: t
* Interface interaction
** Buffer
*** parameter
#+BEGIN_SRC emacs-lisp :tangle yes
(setq view-read-only t ) ; Always open read-only buffers in view-mode
(setq cursor-in-non-selected-windows t) ; Hide the cursor in inactive windows
#+END_SRC
*** kill current buffer without asking
Don't ask before killing a buffer. I know what I'm doing.
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key [remap kill-buffer] #'kill-current-buffer)
#+END_SRC

*** order buffer list =ibuffer=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer)
  :custom
   (ibuffer-saved-filter-groups
   '(("default"
          ("org"   (name . "^.*org$"))
          ("magit" (or (mode . magit-mode)
                       (name . "^magit.*$" )))
          ("dired" (mode . dired-mode))

          ("IRC"   (or (mode . circe-channel-mode) (mode . circe-server-mode)))
          ("web"   (or (mode . web-mode) (mode . js2-mode)))
          ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
          ("gnus"  (or (mode . message-mode)
                       (mode . bbdb-mode)
                       (mode . mail-mode)
                       (mode . gnus-group-mode)
                       (mode . gnus-summary-mode)
                       (mode . gnus-article-mode)
                       (name . "^\\.bbdb$")
                       (name . "^\\.newsrc-dribble")))
          ("programming" (or
                          (mode . java-mode)
                          (mode . groovy-mode)
                          (mode . conf-space-mode)))
          ("emacs" (or
                    (name . "^\\*scratch\\*$")
                    (name . "^\\*Messages\\*$")))
          ("Ediff" (name . "^\\*Ediff.*\\*$"))
          )))
  :hook ('ibuffer-mode .
     (lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "default"))))
#+END_SRC
** Window
*** switch window =ace-window=
ace window allow to simply switch when only 2 buffer or to choose
which buffer with key when multiple buff

ibuffer is a better buffer mode

toggle-window-split : switch layout when two buffers are open
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ace-window
:bind
(("C-x o" . ace-window)
("M-o" . ace-window))
:init
(setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l))
(setq aw-scope 'frame)
)
#+END_SRC
*** window configuration =winner-mode=
Allow to undo and redo buffer configuration to easily open one buffer than
switch back to multiple open buffer.
- "C . <left>"  -> undo
- "C . <right>" -> redo
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package winner
  :ensure nil
  :init (winner-mode))
#+END_SRC
* Edition
** Parameter
basic default value to enable
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'upcase-region   'disabled nil) ; Allow C-x C-u
(put 'downcase-region 'disabled nil) ; Allow C-x C-l
(show-paren-mode 1) ; Show the parenthesis
(global-hl-line-mode) ; Hightlight current line
(transient-mark-mode t) ; same mark mouse or keyboard
(setq blink-cursor-mode nil) ; the cursor wont blink
(setq indent-tabs-mode nil) ; use space instead of tab to indent
(delete-selection-mode t) ; when writing into marked region delete it
(setq tab-width 4) ; Set width for tabs
#+END_SRC
** Delete til next char =hungry-delete=
#+BEGIN_QUOTE
Deleting a whitespace character will delete all whitespace until the next
non-whitespace character.
# [[https://github.com/nflath/hungry-delete][Nathaniel Flath]]
#+END_QUOTE
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hungry-delete
  :delight
  :config (global-hungry-delete-mode))
#+END_SRC
** Move text =move-text=
Moves the current line (or if marked, the current region's, whole lines).
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package move-text
  :config (move-text-default-bindings)) ; M-p M-n
#+END_SRC
** Whitespace =whitespace=
It is often annoying to see unnecessary blank spaces at the end of a line or
file.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package whitespace
  :delight
  :hook
  (((prog-mode text-mode org-mode) . whitespace-mode)
     (before-save . delete-trailing-whitespace))
:custom
(whitespace-style '(face trailing tabs lines-tail newline empty
  tab-mark newline-mark))
  (whitespace-display-mappings
    ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 ; FULL STOP 「.」
    '((space-mark 32 [183] [46])
      (newline-mark 10 [182 10]) ; LINE FEED
      (tab-mark 9 [9655 9] [92 9])))) ; tab
#+END_SRC

** Auto-Completion =company=

=company= provides auto-completion at point and to Displays a small pop-in
containing the candidates.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
:delight
:init (global-company-mode)
:config
(bind-key [remap completion-at-point] #'company-complete company-mode-map)
:custom

(company-begin-commands '(self-insert-command))
(company-idle-delay 0.2)
(company-minimum-prefix-length 3)
(company-show-numbers t)
(company-tooltip-align-annotations t))

(use-package company-quickhelp          ; Documentation popups for Company
:delight :hook (global-company-mode . company-quickhelp-mode))

(use-package company-box ; icons for company-mode-map
:delight
:hook (company-mode . company-box-mode))
#+END_SRC
** Edit all occurence =iedit=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit
:bind ("C-c e" . iedit-mode))
#+END_SRC

#+RESULTS:
: iedit-mode
** Auto-indentation =aggressive-indent=
=aggressive-indent-mode= is a minor mode that keeps your code *always*
indented.  It reindents after every change, making it more reliable than
electric-indent-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package aggressive-indent
:hook ((prog-mode org-mode) . aggressive-indent-mode)
:custom (aggressive-indent-comments-too t))
#+END_SRC
** Decoration
*** TODO colorize background of text color like green =rainbow-mode=
Colorize colors as text with their value.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-mode
  :delight
  :custom
    (rainbow-x-colors t)
    (rainbow-r-colors t)
:init(rainbow-mode))
#+END_SRC
*** TODO Show line at 80 char =fill-column-indicator=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package fill-column-indicator
  ;; :delight
  ;; :custom
  ;; (fci-rule-color (x-get-resource "color1" ""))
  ;; (fci-rule-width '1)
  ;; :hook (prog-mode . fci-mode))
  #+END_SRC
** Specific
*** Programming language
**** TODO OCaml
#+BEGIN_SRC emacs-lisp :tangle yes
      (use-package tuareg
        :mode ("\\.ml[ily]?$" . tuareg-mode)
        :delight " "
        :init
         (dolist
         (var (car (read-from-string
               (shell-command-to-string "opam config env --sexp"))))
         (setenv (car var) (cadr var))))

      (use-package dune :after tuareg)

      (use-package merlin
        :hook ((tuareg-mode caml-mode) . merlin-mode)
        :bind (:map merlin-mode-map
                   ("M-." . merlin-locate)
                   ("M-," . merlin-pop-stack))
        :delight ""
        :custom
        (merlin-locate-preference 'ml)
        (merlin-command 'opam)
        :config
        (with-eval-after-load 'company
          (add-hook 'merlin-mode-hook 'company-mode)
          (add-to-list 'company-backends 'merlin-company-backend)))

  (use-package merlin-eldoc
    :after merlin
    :custom
    (eldoc-echo-area-use-multiline-p t) ; use multiple lines when necessary
    (merlin-eldoc-max-lines 8)          ; but not more than 8
    (merlin-eldoc-type-verbosity 'min)  ; don't display verbose types
    (merlin-eldoc-function-arguments nil) ; don't show function arguments
    (merlin-eldoc-doc t)                ; don't show the documentation
    :bind (:map merlin-mode-map
                ("C-c m p" . merlin-eldoc-jump-to-prev-occurrence)
                ("C-c m n" . merlin-eldoc-jump-to-next-occurrence))
    :hook (tuareg-mode . merlin-eldoc-setup))
      (use-package utop
        :delight " "
        :hook
        (tuareg-mode . (lambda ()
                         (setq utop-command "utop -emacs")
                         (utop-minor-mode))))

      (use-package ocp-indent
        :after tuareg)

      (use-package ocamlformat
        :ensure nil
        :custom
        (ocamlformat-show-errors 'echo)
        (ocamlformat-enable 'enable-outside-detected-project)
        :ensure-system-package (ocamlformat . "opam install ocamlformat")
        :bind (:map tuareg-mode-map ("C-M-<tab>" . #'ocamlformat))
        :hook (before-save . #'ocamlformat-before-save)
        :after tuareg)

#+END_SRC

#+RESULTS:
: ocamlformat

**** Json
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package json-mode
 :mode ("\\.json$" . json-mode))
 #+END_SRC

**** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :ensure-system-package (markdown . "yay -S markdown")
  :delight ""
  :mode ("INSTALL\\'" "CONTRIBUTORS\\'" "LICENSE\\'" "README\\'" "\\.markdown\\'" "\\.md\\'"))
#+END_SRC
**** Python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :ensure-system-package (markdown . "yay -S python")
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC
*** Pdf =pdf-tools=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package pdf-tools
  ;;        :mode "\\.pdf\\"
  ;;        :init (pdf-tools-install :no-query))

  ;;        (use-package pdf-view
  ;;        :ensure nil
  ;;        :after pdf-tools
  ;;        :bind (:map pdf-view-mode-map
  ;;        ("C-s" . isearch-forward)
  ;;        ("d" . pdf-annot-delete)
  ;;        ("h" . pdf-annot-add-highlight-markup-annotation)
  ;;        ("t" . pdf-annot-add-text-annotation))
  ;;                    :custom
  ;;                    (pdf-view-display-size 'fit-page)
  ;;                    (pdf-view-resize-factor 1.1)
  ;;                    (pdf-view-use-unicode-ligther nil))
#+End_SRC
*** csv =csv-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package csv-mode
 :mode "\\.[Cc][Ss][Vv]\\'"
 :custom
 (csv-separators '(";" ",")
))
#+END_SRC

* Project
** interaction =projectile=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
  :delight " "
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :custom
  (projectile-grep-default-files "src/")
  (projectile-project-search-path
  '("~/CS/Cryptium/" "~/CS/Pers/" "~/CS/VGED/" "~/CS/Wagner/"))
    (projectile-completion-system 'ivy)
    :init (projectile-mode))
(use-package counsel-projectile
:after counsel projectile
:init (counsel-projectile-mode))
#+END_SRC

** Git
*** Interaction =magit=
It is quite common to work on Git repositories, so it is important to have a
configuration that we like.
#+BEGIN_QUOTE
[[https://github.com/magit/magit][Magit]] is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.
[[https://github.com/tarsius][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
   :bind ("C-c g" . magit-status)
   :delight " ")
(use-package git-commit
  :after magit
  :hook (git-commit-mode . my/git-commit-auto-fill-everywhere)
  :custom (git-commit-summary-max-length 50)
  :preface
  (defun my/git-commit-auto-fill-everywhere ()
    "Ensures that the commit body does not exceed 72 characters."
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nil)))
#+END_SRC

#+RESULTS:

*** Forge =forge=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package forge :after magit :delight)
  #+END_SRC
*** current modification =git-gutter=
In addition to that, I like to see the lines that are being modified in the file
while it is being edited.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter
  :delight
  :init (global-git-gutter-mode t))
#+END_SRC
*** show last commit modification =git-timemachine=
Easily see the changes made by previous commits.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-timemachine :delight)
#+END_SRC

* System interaction
** File explorer =dired=
Dired is a major mode for exploring file

dired-x is a minor that brings a lot to dired like hidding
- uninteresting file
- guessing which command to call...

dired-du give the size of directory using du or lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired
    :delight ""
    :ensure nil
    :bind (:map dired-mode-map
              ("RET" . dired-find-alternate-file)
              ("^" . (lambda () (interactive) (find-alternate-file ".."))))
    :config
      (put 'dired-find-alternate-file 'disabled nil) ; disables warning
    :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-hide-details-hide-symlink-targets nil)
      (dired-omit-files "^\\...+$")
      (dired-omit-mode t)
      (dired-listing-switches "-alh")
      (dired-ls-F-marks-symlinks nil)
      (dired-recursive-copies 'always))

  (use-package dired-du :after dired) ; recursive size of files

  (use-package all-the-icons-dired ; icons
    :delight
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-x
    :ensure nil
    :after dired
    :config
    )
#+END_SRC

** shell command =exec-path-from-shell=
update path of emacs to user path
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
 :config (exec-path-from-shell-initialize))
#+END_SRC



* Mail =gnus=
#+BEGIN_SRC emacs-lisp :tangle yes
 (use-package gnus
 :bind (("C-c m" . gnus)
 :map gnus-group-mode-map
   ("C-c C-f" . gnus-summary-mail-forward))
 :delight "")

 (use-package w3m
 :delight ""
 :after gnus)

 (use-package all-the-icons-gnus
 :after gnus all-the-icons
 :config
 (all-the-icons-gnus-setup))
#+END_SRC

* media
** TODO mpd interface =mpdel=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package mpdel
  ;; :delight " "
  ;; :bind-keymap
  ;; ("C-c m" . mpdel-prefix-key)
  ;; :ensure-system-package (mdp . "yay -S mpd"))
  ;; (use-package ivy-mpdel
  ;; :after mpdel)
#+END_SRC
* Organiser/calendar/linker/etc =org-mode=
Amazing mode of GNU Emacs.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
  :ensure org-plus-contrib
  :delight " "
  :bind
    (:map org-mode-map ("C-c o" . counsel-outline))
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
  :config
    (org-babel-do-load-languages
    'org-babel-lpoad-languages '((calc . t)))
  :custom
    (org-ellipsis " ⤵")
    (org-use-extra-keys t)
    (org-catch-invisible-edits 'show-and-error)
    (org-cycle-separator-lines 0)
    (org-refile-use-outline-path 3)
  :hook
    ((after-save . my/config-tangle)
      (auto-save . org-save-all-org-buffers)))
#+END_SRC
** Table of content =toc-org=
Create and update automaticaly a table of contents.  =toc-org=
will maintain a table of contents at the first heading that has a
=:TOC:= tag.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toc-org
:after org
:hook (org-mode . toc-org-enable))
#+END_SRC

** org indentation =org-indent=
For a cleaner inline mode.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-indent
:delight
:ensure nil
:hook (org-mode . org-indent-mode))
#+END_SRC

** bullets =org-bullets=
Prettier [[https://github.com/sabof/org-bullets][bullets]] in org-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
:hook (org-mode . org-bullets-mode)
:custom (org-bullets-bullet-list '("●" "▲" "■" "✶" "◉" "○" "○")))
#+END_SRC
** face of TODO
Foreground and the weight (bold) of each keywords.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-faces
:ensure nil
:after org
:custom
(org-todo-keyword-faces
'(
("BOOK"       . (:foreground "red"    :weight bold))
("GO"         . (:foreground "orange" :weight bold))

("WENT"       . (:foreground "green"))
("CANCELED"   . (:foreground "grey" ))


("SOMEDAY"    . (:foreground "blue" ))
("TODO"       . (:foreground "red"    :weight bold))
("INPROGRESS" . (:foreground "orange" :weight bold))
("WAITING"    . (:foreground "yellow" :weight bold))

("DONE"       . (:foreground "green"))
("ABORDED"    . (:foreground "grey" ))


("IDEA"       . (:foreground "blue"))
("FETCH"      . (:foreground "red" ))
("GIVE"       . (:foreground "orange"))

("FETCHED"    . (:foreground "green"))
("GIVEN"      . (:foreground "green"))

("USE"        . (:foreground "red"    :weight bold))
("CONSUMED"   . (:foreground "green"  :weight bold))
("LOST"       . (:foreground "grey"))
)))
#+END_SRC

#+RESULTS:
** Agenda
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-agenda
:ensure nil
:delight " "
:after org
:custom
(org-directory "~/org")
(org-agenda-files '("~/org/"))
(org-agenda-dim-blocked-tasks t)
(org-agenda-inhibit-startup t)
(org-agenda-sticky t)
(org-agenda-time-grid
'((daily today require-timed)
(800 1000 1200 1400 1600 1800 2000)
" " ""))
(org-enforce-todo-dependencies t)
(org-habit-graph-column 80)
(org-habit-show-habits-only-for-today nil)
(org-track-ordered-property-with-tag t)
(org-agenda-todo-ignore-timestamp 'future)
(org-agenda-todo-ignore-scheduled 'future)
(org-agenda-todo-ignore-deadline  'far)
(org-agenda-skip-scheduled-if-done t)
(org-agenda-skip-scheduled-if-deadline-is-shown t)
(org-agenda-skip-deadline-if-done t)
(org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
(org-agenda-skip-timestamp-if-deadline-is-shown t)
(org-agenda-skip-timestamp-if-done t))
#+END_SRC
*** improved agenda view =org-super-agenda=
Org super agenda allows a more readible agenda by grouping the todo item
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-super-agenda
:init (org-super-agenda-mode)
:custom
(org-agenda-custom-commands
'(("b" "My Agenda"
((agenda ""
(
(org-agenda-span '1)
(org-super-agenda-groups
'(
(:name "Agenda" :and (:time-grid t :todo t))
(:name "Scheduled" :scheduled t)
(:name "Deadline" :deadline t)
(:name "Book ASAP"   :todo "BOOK")
(:name "Information" :and (:time-grid t :todo nil))
))))
(alltodo ""
((org-super-agenda-groups
'(
(:name "Agenda"        :and (:date today :time-grid t :todo "GO"))
(:name "Scheduled"     :scheduled t)
(:name "Deadline"      :deadline t)
(:name "Book ASAP"     :todo "BOOK")
(:name "Information"   :and (:time-grid t :todo nil))
(:name "Yesterday"     :and (:date t :todo "GO"))
(:name "Current Work"  :and (:tag "work" :todo "INPROGRESS"))
(:name "recurrent Work":and (:tag "work" :tag  "recurrent"))
(:name "Next work"     :and (:tag "work" :todo "TODO"))
(:name "on pause Work" :todo "WAITING")
(:name "recurrent"     :tag "recurrent")
(:name "Current"       :todo "INPROGRESS")
(:name "Next "         :todo "TODO")
(:name "Daily"         :and(:todo "FETCH" :tag  "daily"))
(:name "Fetch asap"    :and (:todo "FETCH" :not (:tag "media")))
(:name "Download "     :and (:todo "FETCH" :tag "media"))
(:name "One day"       :todo "SOMEDAY")
(:name "on pause"      :todo "WAITING")
(:discard (:todo ("TOGO" "GO"  "TOUSE" "USE" "IDEA")))
))))
))))
)
#+END_SRC

#+RESULTS:


*** calendar view =calfw=

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package calfw :after org-agenda)

(use-package calfw-org
:after calfw
:bind ("C-c z" . cfw:open-org-calendar)
:custom
(cfw:org-overwrite-default-keybinding t))
#+END_SRC

*** TODO Caldav sync =org-caldav=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-caldav
  :init
  (defvar org-caldav-sync-timer nil
    "Timer that `org-caldav-push-timer' used to reschedule itself, or nil.")
  (defun org-caldav-sync-with-delay (secs)
  (when org-caldav-sync-timer (cancel-timer org-caldav-sync-timer))
  (setq org-caldav-sync-timer
  (run-with-idle-timer (* 1 secs) nil 'org-caldav-sync)))
  (setq org-caldav-url
  "https://cloud.frontir.cc/remote.php/dav/calendars/sylvainr/")
  (setq org-caldav-backup-file "~/org/backup.org")
  ;; (setq org-caldav-calendars
  ;; '((:calendar-id "master"
  ;;     :files "~/org/master.org"
  ;;     :inbox "~/org/master-sync.org")
  ;;     (:calendar-id "claire"
  ;;     :files "~/org/claire.org"
  ;;     :inbox "~/org/claire-sync.org")
  ;;     (:calendar-id "work"
  ;;     :sync 'cal->org
  ;;     :url ('google "sylvain@cryptium.ch")
  ;;     :inbox "~/org/work.org")))
  (setq org-caldav-calendar-id "calendar")
  (setq org-caldav-inbox "~/org/master-sync.org")
  (setq org-caldav-files '("~/org/master.org"))
  :config
  (setq org-icalendar-alarm-time 1)
  (setq org-caldav-show-sync-results nil)
  (setq org-icalendar-include-todo t)
  (setq org-icalendar-use-deadline
  '(event-if-todo event-if-not-todo todo-due))
  (setq org-icalendar-use-scheduled
    '(todo-start event-if-todo event-if-not-todo))
    :hook (
    (kill-emacs . org-caldav-sync)
    (after-save .
      (lambda ()
         (when (eq major-mode 'org-mode) (org-caldav-sync-with-delay 30))))) )
         #+END_SRC
** Capture =org-capture=
=org-capture= templates saves you a lot of time when adding new entries. I use
it to quickly record tasks, ledger entries, notes and other semi-structured
information.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-capture
:ensure nil
:after org
:preface
(defun my/gmaps-format (addr)
  "return a googlemaps link that is correctly formated"
  (format "https://www.google.fr/maps/search/%s"
  (replace-regexp-in-string " " "+" addr)))

(defun my/org-timestamp-add-reminder (date day)
"add a reminder to a timestamp like : <2019-11-14 -5d>"
(format "%s -%dd%s"  (substring date 0 -1) day (substring date -1)))

(defvar my/with "%^{With |Sylvain|Claire|Adrien|Ada|Bernadat|P&C|A&D|B&J|Cryptium|Casa Rosada}")
(defvar my/place "%^{Place |78 rue Hippolyte Kahn|Théâtre|Cinéma|Parc|}")
(defvar my/gare "Lyon Part-dieu|Lyon Perrache|Paris GdL|Montpellier St-Roch")
(defvar my/stop "Lyon Brasserie Georges|Montpellier")
(defvar my/from  (concat "%^{From " my/gare "}"))
(defvar my/to    (concat "%^{To " my/gare "}"))
(message (my/gmaps-format "78 rue hippolyte kahn"))
(defvar my/agenda-template (concat
"%^{Name} %^g
:PROPERTIES:
  :Created: %U
  :Name:    %\\1
  :Type:    %^{Type}p
  :Place: " my/place "
  :Gmaps: [[%(my/gmaps-format \"%\\2\")][\"%\\2\"]]
  :With:    " my/with "
  :END:
  %^{When}T
  "))

(defvar my/org-tobook-template (concat "* BOOK " my/agenda-template))

(defvar my/org-togo-template (concat "* GO " my/agenda-template))

(defvar my/org-trip-template (concat
  "* GO %\\1 -%\\3-> %\\2
  :PROPERTIES:
  :Created: %U
  :From:   " my/from "
  :To:     "  my/to "
  :Type:    %^{Type}p
  :With:   " my/with "
  :END:
  %^{When}T
  "))

  (defvar my/org-roundtrip-template (concat
  "* GO %\\1 -> %\\2
  :PROPERTIES:
  :Created: %U
  :From:   " my/from "
  :To:     "  my/to "
  :Type:    %^{Type}p
  :With:   " my/with "
  :END:
  %^{When}T\n* GO %\\2 -> %\\1
  :PROPERTIES:
  :Created: %U
  :From:      %\\2
  :To:       %\\1
  :Type:    %^{Type}p
  :With:   " my/with "
  :END:
  %^{When}T
  "))

  (defvar my/org-voucher-template
  "* USE %^{Valor}
  DEADLINE:%^{Before}t
  :PROPERTIES:
  :Reduction:     %^{Reduction}
  :At:     %^{At|oui.sncf|ouibus|ouigo...}
  :END:
  %^{Cuando}t
  ")

  (defvar my/org-todo-template
  "* TODO %^{What} %^g
  :PROPERTIES:
  :Created:     %U
  :END:
  ")

  (defvar my/org-someday-template
  "* SOMEDAY %^{What} %^g
  :PROPERTIES:
  :Created:     %U
  :END:
  ")

  (defvar my/org-stuff-buy-template
  "* FETCH %^{What}
  :PROPERTIES:
  :Created:     %U
  :END:
  ")

  (defvar my/org-stuff-gift-template
  "* IDEA %^{What}
  :PROPERTIES:
  :Created:     %U
  :For: %^{For}
  :When: %^{When}t
  :END:
  ")

  (defvar my/org-stuff-flat-template
  "* BUY %^{What}
  :PROPERTIES:
  :Created:     %U
  :Room: %^{Room}p
  :CATEGORY: %\\2
  :END:
  ")

  :custom
  (org-capture-templates
  `(("e" "Event")
  ("es" "Show")
  ("esb" "To book" entry (file+headline "~/org/master.org" "Show"),
  my/org-tobook-template)
  ("esg" "To go" entry (file+headline "~/org/master.org" "Show"),
  my/org-togo-template)
  ("eb" "To book" entry (file+headline "~/org/master.org" "Agenda"),
  my/org-tobook-template)
  ("eg" "To go" entry (file+headline "~/org/master.org" "Agenda"),
  my/org-togo-template)
  ("et" "Trip")
  ("ets" "Single trip" entry (file+headline "~/org/master.org" "Trip"),
  my/org-trip-template)
  ("etr" "Round trip" entry (file+headline "~/org/master.org" "Trip"),
  my/org-roundtrip-template)
  ("t" "TO-DO")
  ("tt" "todo" entry (file+headline "~/org/master.org" "TO-DO"),
  my/org-todo-template)
  ("to" "oneday" entry (file+headline "~/org/master.org" "TO-DO"),
  my/org-someday-template)
  ("v" "voucher" entry (file+headline "~/org/master.org" "Voucher"),
  my/org-voucher-template)
  ("s" "stuff")
  ("sf" "fetch" entry (file+headline "~/org/master.org" "objet"),
  my/org-stuff-buy-template)
  ("sg" "gift" entry (file+headline "~/org/master.org" "objet"),
  my/org-stuff-gift-template)
  ("sa" "Flat" entry (file+headline "~/org/master.org" "Flat"),
  my/org-stuff-flat-template))))
#+END_SRC

#+RESULTS:
* Start-up
** Dashboard
Always good to have a dashboard.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
:delight ""
:custom
(dashboard-startup-banner 'official)
(dashboard-center-content t)
:config
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
(dashboard-setup-startup-hook)
(setq dashboard-items
'((agenda . 10)
(projects . 3)
(recents  . 5)
(bookmarks . 2)
(registers . 2))))
#+END_SRC
